#ifndef CPP_TOOLS_SCAFFOLD_TPL_CMAKE_HEADER_LIB_HPP
#define CPP_TOOLS_SCAFFOLD_TPL_CMAKE_HEADER_LIB_HPP

#include <string>

namespace Scaffold {

std::string tpl_cmake_header_lib = R"~(# Generated by Scaffold.
cmake_minimum_required(VERSION 3.9)

set(MAJOR_VERSION 0)
set(MINOR_VERSION 1)
set(PATCH_VERSION 0)
set(tpl_VERSION ${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION})

project({{PROJECT_NAME}} VERSION ${tpl_VERSION})

include(GNUInstallDirs)

SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_EXTENSIONS OFF)

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -pedantic")
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99")

# A list of all header files.
set(HEADERS
  include/{{PROJECT_NAME}}.hpp
)

add_library(${PROJECT_NAME} INTERFACE)
target_include_directories(${PROJECT_NAME} INTERFACE
  $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>
)

target_compile_features(${PROJECT_NAME} INTERFACE cxx_std_17)

install(TARGETS ${PROJECT_NAME}
  EXPORT ${PROJECT_NAME}_Targets
  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)

include(CMakePackageConfigHelpers)
write_basic_package_version_file(
  "${PROJECT_NAME}ConfigVersion.cmake"
  VERSION ${PROJECT_VERSION}
  COMPATIBILITY AnyNewerVersion
)

configure_package_config_file(
  "${PROJECT_SOURCE_DIR}/cmake/${PROJECT_NAME}Config.cmake.in"
  "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
  INSTALL_DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}/cmake
)

install(
  EXPORT ${PROJECT_NAME}_Targets
  FILE ${PROJECT_NAME}Targets.cmake
  NAMESPACE ${PROJECT_NAME}::
  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}/cmake
)

install(
  FILES "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
        "${PROJECT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}/cmake
)

install(
  DIRECTORY ${PROJECT_SOURCE_DIR}/include/
  DESTINATION include/${PROJECT_NAME}
)

# Testing
if(BUILD_TESTS)
  enable_testing()
  add_subdirectory(test)
endif()
)~";

} // Scaffold

#endif // CPP_TOOLS_SCAFFOLD_TPL_CMAKE_HEADER_LIB_HPP
